{
    "filename": "stmt",
    "headerlocation": "/src/include/parser",
    "bodylocation": "/src/parser", 
    "headers": [
        "lexer/token.h", "string", "parser/ast_node_types.h", "parser/expr.h", "vector"
    ],
    "classes": [
        {
            "name": "Stmt",
            "functions": [
                {
                    "name": "nodeType",
                    "returntype": "enum AST_NODE_TYPES",
                    "virtual": "pure"
                }
            ]
        },
        {
            "name": "Expression",
            "base": "Stmt",
            "init_args": [["Expr*", "expression"]],
            "functions": [
                {
                    "name": "nodeType",
                    "returntype": "enum AST_NODE_TYPES",
                    "body": "return AST_NODE_TYPES::STMT_EXPRESSION;"
                },
                {
                    "name": "accept",
                    "returntype": "void",
                    "args": [["StmtVisitor*", "visitor"]],
                    "body": "return visitor->visit(this);"
                }
            ]
        },
        {
            "name": "Print",
            "base": "Stmt",
            "init_args": [["Expr*", "expression"]],
            "functions": [
                {
                    "name": "nodeType",
                    "returntype": "enum AST_NODE_TYPES",
                    "body": "return AST_NODE_TYPES::STMT_PRINT;"
                },
                {
                    "name": "accept",
                    "returntype": "void",
                    "args": [["StmtVisitor*", "visitor"]],
                    "body": "return visitor->visit(this);"
                }
            ]
        },
        {
            "name": "Var",
            "base": "Stmt",
            "init_args": [["Token*", "name"],["Expr*", "initializer"]],
            "functions": [
                {
                    "name": "nodeType",
                    "returntype": "enum AST_NODE_TYPES",
                    "body": "return AST_NODE_TYPES::STMT_VAR;"
                },
                {
                    "name": "accept",
                    "returntype": "void",
                    "args": [["StmtVisitor*", "visitor"]],
                    "body": "return visitor->visit(this);"
                }
            ]
        },
        {
            "name": "Block",
            "base": "Stmt",
            "init_args": [["std::vector<Stmt*>*", "stmts"]],
            "functions": [
                {
                    "name": "nodeType",
                    "returntype": "enum AST_NODE_TYPES",
                    "body": "return AST_NODE_TYPES::STMT_BLOCK;"
                },
                {
                    "name": "accept",
                    "returntype": "void",
                    "args": [["StmtVisitor*", "visitor"]],
                    "body": "return visitor->visit(this);"
                }
            ]
        },
        {
            "name": "If",
            "base": "Stmt",
            "init_args": [["Expr*", "contition"],
                          ["Stmt*", "thenBranch"], ["Stmt*", "elseBranch"]],
            "functions": [
                {
                    "name": "nodeType",
                    "returntype": "enum AST_NODE_TYPES",
                    "body": "return AST_NODE_TYPES::STMT_IF;"
                },
                {
                    "name": "accept",
                    "returntype": "void",
                    "args": [["StmtVisitor*", "visitor"]],
                    "body": "return visitor->visit(this);"
                }
            ]
        },
        {
            "name": "While",
            "base": "Stmt",
            "init_args": [["Expr*", "contition"], ["Stmt*", "whileBody"]],
            "functions": [
                {
                    "name": "nodeType",
                    "returntype": "enum AST_NODE_TYPES",
                    "body": "return AST_NODE_TYPES::STMT_WHILE;"
                },
                {
                    "name": "accept",
                    "returntype": "void",
                    "args": [["StmtVisitor*", "visitor"]],
                    "body": "return visitor->visit(this);"
                }
            ]
        },
        {
            "name": "Function",
            "base": "Stmt",
            "init_args": [["Token*", "name"],
                    ["std::vector<Token*>*", "params"], ["std::vector<Stmt*>*", "body"]],
            "functions": [
                {
                    "name": "nodeType",
                    "returntype": "enum AST_NODE_TYPES",
                    "body": "return AST_NODE_TYPES::DEFN_FUNC;"
                },
                {
                    "name": "accept",
                    "returntype": "void",
                    "args": [["StmtVisitor*", "visitor"]],
                    "body": "return visitor->visit(this);"
                }
            ]
        },
        {
            "name": "Class",
            "base": "Stmt",
            "init_args": [["Token*", "name"], ["Variable*", "superclass"], ["std::vector<Function*>*", "methods"]],
            "functions": [
                {
                    "name": "nodeType",
                    "returntype": "enum AST_NODE_TYPES",
                    "body": "return AST_NODE_TYPES::DEFN_CLASS;"
                },
                {
                    "name": "accept",
                    "returntype": "void",
                    "args": [["StmtVisitor*", "visitor"]],
                    "body": "return visitor->visit(this);"
                }
            ]
        },
        {
            "name": "Return",
            "base": "Stmt",
            "init_args": [["Token*", "ret_token"], ["Expr*", "exp"]],
            "functions": [
                {
                    "name": "nodeType",
                    "returntype": "enum AST_NODE_TYPES",
                    "body": "return AST_NODE_TYPES::STMT_RET;"
                },
                {
                    "name": "accept",
                    "returntype": "void",
                    "args": [["StmtVisitor*", "visitor"]],
                    "body": "return visitor->visit(this);"
                }
            ]
        },
        {
            "name": "StmtVisitor",
            "functions": [
                {
                    "name": "visit",
                    "args": [["Print*", "printStmt"]],
                    "returntype": "void",
                    "virtual": "pure"
                },
                {
                    "name": "visit",
                    "args": [["Expression*", "exprStmt"]],
                    "returntype": "void",
                    "virtual": "pure"
                },
                {
                    "name": "visit",
                    "args": [["Block*", "blockStmt"]],
                    "returntype": "void",
                    "virtual": "pure"
                },
                {
                    "name": "visit",
                    "args": [["If*", "ifStmt"]],
                    "returntype": "void",
                    "virtual": "pure"
                },
                {
                    "name": "visit",
                    "args": [["Function*", "funcDecl"]],
                    "returntype": "void",
                    "virtual": "pure"
                },
                {
                    "name": "visit",
                    "args": [["Class*", "classDecl"]],
                    "returntype": "void",
                    "virtual": "pure"
                },
                {
                    "name": "visit",
                    "args": [["While*", "whileStmt"]],
                    "returntype": "void",
                    "virtual": "pure"
                },
                {
                    "name": "visit",
                    "args": [["Return*", "returnStmt"]],
                    "returntype": "void",
                    "virtual": "pure"
                },
                {
                    "name": "visit",
                    "args": [["Var*", "varStmt"]],
                    "returntype": "void",
                    "virtual": "pure"
                }
            ]
        }
    ]

}