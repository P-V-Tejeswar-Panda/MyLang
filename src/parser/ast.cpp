/*
 * This file is generated by './tools/generate_ast_node.py'.
 * DO NOT EDIT MANUALLY!!, Add your spec to './tools/expr_spec.json' and it will be auto generated.
*/
#include <lexer/token.h>
#include <string>


class ExprVisitor{
public:
    ExprVisitor(){}
    void visit(Expr* expr){}
};

class Expr{
public:
    Expr(){}
    void accept(ExprVisitor* visitor){
        visitor->visit(this);
    }
};

class Literal: public Expr{
    enum TokenType ttype;
    std::string lexeme;
public:
    Literal(enum TokenType ttype,std::string lexeme){
        this->ttype = ttype;
        this->lexeme = lexeme;
    }
};

class Grouping: public Expr{
    Expr* expr;
public:
    Grouping(Expr* expr){
        this->expr = expr;
    }
};

class Unary: public Expr{
    enum TokenType ttype;
    Expr* expr;
public:
    Unary(enum TokenType ttype,Expr* expr){
        this->ttype = ttype;
        this->expr = expr;
    }
};

class Binary: public Expr{
    Expr* left;
    Operator* op;
    Expr* right;
public:
    Binary(Expr* left,Operator* op,Expr* right){
        this->left = left;
        this->op = op;
        this->right = right;
    }
};

class Operator: public Expr{
    enum TokenType ttype;
public:
    Operator(enum TokenType ttype){
        this->ttype = ttype;
    }
};


