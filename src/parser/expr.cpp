/*
 * This file is generated by './tools/generate_ast_node.py'.
 * DO NOT EDIT MANUALLY!!, Add your spec to './tools/expr_spec.json' and it will be auto generated.
*/
#include <parser/expr.h>


Expr::Expr(){}


Literal::Literal(Token* op){
    this->op = op;
}
MyLang_Object* Literal::accept(ExprVisitor* visitor){
    return visitor->visit(this);
}
enum AST_NODE_TYPES Literal::nodeType(){
    return AST_NODE_TYPES::LITERAL;
}


Logical::Logical(Expr* left,Token* op,Expr* right){
    this->left = left;
    this->op = op;
    this->right = right;
}
MyLang_Object* Logical::accept(ExprVisitor* visitor){
    return visitor->visit(this);
}
enum AST_NODE_TYPES Logical::nodeType(){
    return AST_NODE_TYPES::EXPR_LOGICAL;
}


Grouping::Grouping(Token* op,Expr* expr,Token* cp){
    this->op = op;
    this->expr = expr;
    this->cp = cp;
}
MyLang_Object* Grouping::accept(ExprVisitor* visitor){
    return visitor->visit(this);
}
enum AST_NODE_TYPES Grouping::nodeType(){
    return AST_NODE_TYPES::GROUPING;
}


Unary::Unary(Token* token,Expr* expr){
    this->token = token;
    this->expr = expr;
}
MyLang_Object* Unary::accept(ExprVisitor* visitor){
    return visitor->visit(this);
}
enum AST_NODE_TYPES Unary::nodeType(){
    return AST_NODE_TYPES::UNARY;
}


Variable::Variable(Token* name){
    this->name = name;
}
MyLang_Object* Variable::accept(ExprVisitor* visitor){
    return visitor->visit(this);
}
enum AST_NODE_TYPES Variable::nodeType(){
    return AST_NODE_TYPES::VARIABLE;
}


Assign::Assign(Token* name,Expr* value){
    this->name = name;
    this->value = value;
}
MyLang_Object* Assign::accept(ExprVisitor* visitor){
    return visitor->visit(this);
}
enum AST_NODE_TYPES Assign::nodeType(){
    return AST_NODE_TYPES::ASSIGN;
}


Binary::Binary(Expr* left,Token* op,Expr* right){
    this->left = left;
    this->op = op;
    this->right = right;
}
MyLang_Object* Binary::accept(ExprVisitor* visitor){
    return visitor->visit(this);
}
enum AST_NODE_TYPES Binary::nodeType(){
    return AST_NODE_TYPES::BINARY;
}


ExprVisitor::ExprVisitor(){}



