/*
 * This file is generated by './tools/generate_ast_node.py'.
 * DO NOT EDIT MANUALLY!!, Add your spec to './tools/expr_spec.json' and it will be auto generated.
*/
#ifndef __EXPR_H__
#define __EXPR_H__
#include <lexer/token.h>
#include <string>


class ExprVisitor{
public:
    ExprVisitor();
    virtual void visit(Expr* expr) = 0;
};

class Expr{
public:
    Expr();
    void accept(ExprVisitor* visitor);
};

class Literal: public Expr{
public:
    enum TokenType ttype;
    std::string lexeme;
    Literal(enum TokenType ttype,std::string lexeme);
};

class Grouping: public Expr{
public:
    Expr* expr;
    Grouping(Expr* expr);
};

class Unary: public Expr{
public:
    enum TokenType ttype;
    Expr* expr;
    Unary(enum TokenType ttype,Expr* expr);
};

class Binary: public Expr{
public:
    Expr* left;
    Operator* op;
    Expr* right;
    Binary(Expr* left,Operator* op,Expr* right);
};

class Operator: public Expr{
public:
    enum TokenType ttype;
    Operator(enum TokenType ttype);
};

#endif
