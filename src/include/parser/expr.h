/*
 * This file is generated by './tools/generate_ast_node.py'.
 * DO NOT EDIT MANUALLY!!, Add your spec to './tools/expr_spec.json' and it will be auto generated.
*/
#ifndef __EXPR_H__
#define __EXPR_H__
#include <lexer/token.h>
#include <string>
#include <parser/ast_node_types.h>
#include <interpreter/myLang_types.h>

class ExprVisitor;


class Expr{
public:
    Expr();
    virtual MyLang_Object* accept(ExprVisitor* visitor) = 0;
    virtual enum AST_NODE_TYPES nodeType() = 0;
};

class Literal: public Expr{
public:
    Token* op;
    Literal(Token* op);
    virtual MyLang_Object* accept(ExprVisitor* visitor);
    enum AST_NODE_TYPES nodeType();
};

class Logical: public Expr{
public:
    Expr* left;
    Token* op;
    Expr* right;
    Logical(Expr* left,Token* op,Expr* right);
    virtual MyLang_Object* accept(ExprVisitor* visitor);
    enum AST_NODE_TYPES nodeType();
};

class Grouping: public Expr{
public:
    Token* op;
    Expr* expr;
    Token* cp;
    Grouping(Token* op,Expr* expr,Token* cp);
    virtual MyLang_Object* accept(ExprVisitor* visitor);
    enum AST_NODE_TYPES nodeType();
};

class Unary: public Expr{
public:
    Token* token;
    Expr* expr;
    Unary(Token* token,Expr* expr);
    virtual MyLang_Object* accept(ExprVisitor* visitor);
    enum AST_NODE_TYPES nodeType();
};

class Variable: public Expr{
public:
    Token* name;
    Variable(Token* name);
    virtual MyLang_Object* accept(ExprVisitor* visitor);
    enum AST_NODE_TYPES nodeType();
};

class Assign: public Expr{
public:
    Token* name;
    Expr* value;
    Assign(Token* name,Expr* value);
    virtual MyLang_Object* accept(ExprVisitor* visitor);
    enum AST_NODE_TYPES nodeType();
};

class Binary: public Expr{
public:
    Expr* left;
    Token* op;
    Expr* right;
    Binary(Expr* left,Token* op,Expr* right);
    virtual MyLang_Object* accept(ExprVisitor* visitor);
    enum AST_NODE_TYPES nodeType();
};

class ExprVisitor{
public:
    ExprVisitor();
    virtual MyLang_Object* visit(Literal* literal) = 0;
    virtual MyLang_Object* visit(Logical* logical) = 0;
    virtual MyLang_Object* visit(Grouping* grouping) = 0;
    virtual MyLang_Object* visit(Unary* unary) = 0;
    virtual MyLang_Object* visit(Variable* variable) = 0;
    virtual MyLang_Object* visit(Assign* assign) = 0;
    virtual MyLang_Object* visit(Binary* binary) = 0;
};

#endif
