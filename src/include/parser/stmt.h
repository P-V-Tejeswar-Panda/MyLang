/*
 * This file is generated by './tools/generate_ast_node.py'.
 * DO NOT EDIT MANUALLY!!, Add your spec to './tools/expr_spec.json' and it will be auto generated.
*/
#ifndef __STMT_H__
#define __STMT_H__
#include <lexer/token.h>
#include <string>
#include <parser/ast_node_types.h>
#include <parser/expr.h>
#include <vector>

class StmtVisitor;

class Stmt{
public:
    Stmt();
    virtual enum AST_NODE_TYPES nodeType() = 0;
};

class Expression: public Stmt{
public:
    Expr* expression;
    Expression(Expr* expression);
    enum AST_NODE_TYPES nodeType();
    void accept(StmtVisitor* visitor);
};

class Print: public Stmt{
public:
    Expr* expression;
    Print(Expr* expression);
    enum AST_NODE_TYPES nodeType();
    void accept(StmtVisitor* visitor);
};

class Var: public Stmt{
public:
    Token* name;
    Expr* initializer;
    Var(Token* name,Expr* initializer);
    enum AST_NODE_TYPES nodeType();
    void accept(StmtVisitor* visitor);
};

class Block: public Stmt{
public:
    std::vector<Stmt*>* stmts;
    Block(std::vector<Stmt*>* stmts);
    enum AST_NODE_TYPES nodeType();
    void accept(StmtVisitor* visitor);
};

class If: public Stmt{
public:
    Expr* contition;
    Stmt* thenBranch;
    Stmt* elseBranch;
    If(Expr* contition,Stmt* thenBranch,Stmt* elseBranch);
    enum AST_NODE_TYPES nodeType();
    void accept(StmtVisitor* visitor);
};

class While: public Stmt{
public:
    Expr* contition;
    Stmt* whileBody;
    While(Expr* contition,Stmt* whileBody);
    enum AST_NODE_TYPES nodeType();
    void accept(StmtVisitor* visitor);
};

class Function: public Stmt{
public:
    Token* name;
    std::vector<Token*>* params;
    std::vector<Stmt*>* body;
    Function(Token* name,std::vector<Token*>* params,std::vector<Stmt*>* body);
    enum AST_NODE_TYPES nodeType();
    void accept(StmtVisitor* visitor);
};

class Return: public Stmt{
public:
    Token* ret_token;
    Expr* exp;
    Return(Token* ret_token,Expr* exp);
    enum AST_NODE_TYPES nodeType();
    void accept(StmtVisitor* visitor);
};

class StmtVisitor{
public:
    StmtVisitor();
    virtual void visit(Print* printStmt) = 0;
    virtual void visit(Expression* exprStmt) = 0;
    virtual void visit(Block* blockStmt) = 0;
    virtual void visit(If* ifStmt) = 0;
    virtual void visit(Function* funcDecl) = 0;
    virtual void visit(While* whileStmt) = 0;
    virtual void visit(Return* returnStmt) = 0;
    virtual void visit(Var* varStmt) = 0;
};

#endif
